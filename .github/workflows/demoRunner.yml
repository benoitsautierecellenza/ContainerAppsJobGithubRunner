name: DemoHosted

on:
  workflow_dispatch:
    inputs:
      Environment:
        type: string
        description: 'Environment Name PRD/DEV'
        required: true
        default: 'DEV'

permissions:
  id-token: write
  contents: read

env:
  REPOSITORY: runner_base
  
jobs:
  BuildGHRunnerImage:
    runs-on: ubuntu-latest  
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Check JSON environment file
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
          files: 'IaC/Environments/${{ github.event.inputs.Environment }}.JSON'
          ignore_case: true
          fail: true

    - name: Load JSON environment file into Environment variables
      if: steps.check_files.outputs.files_exists == 'true'
      uses: rgarcia-phi/json-to-variables@v1.1.0
      with:
        filename: 'IaC/Environments/${{ github.event.inputs.Environment }}.JSON' 
        prefix: config
        masked: false
    
    - name: Set environment variables required to select corresponding GitHub Action secrets
      shell: bash  
      run: |
          # Set environment variables required for authentication
          echo "SPN_CLIENT_ID_NAME=${{ github.event.inputs.Environment }}_SPN_APPLICATION_CLIENT_ID" >> $GITHUB_ENV
          echo "SPN_CLIENT_SECRET=${{ github.event.inputs.Environment }}_SPN_APPLICATION_SECRET" >> $GITHUB_ENV
          echo "AZUREAD_TENANT_ID=${{github.event.inputs.Environment }}_AZUREAD_TENANT_ID" >> $GITHUB_ENV
          echo "HUB_SUBSCRIPTION_ID=${{ github.event.inputs.Environment }}_SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "GITHUB_APP_ID=${{ github.event.inputs.Environment }}_GH_APP_ID" >> $GITHUB_ENV
          echo "GITHUB_APP_INSTALLATION_ID=${{ github.event.inputs.Environment }}_GH_APP_INSTALLATION_ID" >> $GITHUB_ENV
          echo "GHAPP_ID=${{ github.event.inputs.Environment }}_DEVCONTAINER_APPID" >> $GITHUB_ENV
          echo "DEVCONTAINER_PEM=${{ github.event.inputs.Environment }}_DEVCONTAINER_PEM" >> $GITHUB_ENV

    - name: 'Az CLI login OpenIDConnect'
      if: ${{contains(github.ref, 'main')}}
      uses: azure/login@v2
      with:
        client-id: ${{ secrets[env.SPN_CLIENT_ID_NAME] }}
        tenant-id: ${{ secrets[env.AZUREAD_TENANT_ID] }}
        subscription-id: ${{ secrets[env.HUB_SUBSCRIPTION_ID] }}
        enable-AzPSSession: true

    - name: 'Azure login SPN'
      if: ${{ ! contains(github.ref, 'main')}}
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets[env.SPN_CLIENT_ID_NAME] }}","clientSecret":"${{ secrets[env.SPN_CLIENT_SECRET] }}","subscriptionId":"${{ secrets[env.HUB_SUBSCRIPTION_ID] }}","tenantId":"${{ secrets[env.AZUREAD_TENANT_ID] }}"}'
        enable-AzPSSession: true 

    - name: Create GitHub App Token
      uses: actions/create-github-app-token@v2
      id: app-token
      with:
        app-id:  ${{ secrets[env.GHAPP_ID] }}
        private-key: '${{ secrets[env.DEVCONTAINER_PEM] }}'
        owner: ${{ github.repository_owner }}
        repositories: ${{ github.event.repository.name }}

    - name: Get latest Github Action Runnner version
      run: |
        GITHUBACTION_RUNNER_LATEST_TAG=$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/actions/runner/ '*.*.*' | tail --lines=1 | cut --delimiter='/' --fields=3)
        GITHUBACTION_RUNNER_LATEST_TAG=$(echo "$GITHUBACTION_RUNNER_LATEST_TAG" | tr -d 'v') 
        echo "GITHUBACTION_RUNNER_LATEST_TAG=$GITHUBACTION_RUNNER_LATEST_TAG" >> $GITHUB_ENV
  
    - name: Load GitHub Runner Container image applications versions
      uses: rgarcia-phi/json-to-variables@v1.1.0
      with:
        filename: 'Docker/versions.json'
        prefix: docker
        masked: false
   
    - name: Build base GitHub Action Runner image
      uses: Azure/CLI@v2
      with:
        inlineScript: |
         # Build image to be used for runner
         cd Docker
         az acr build --registry ${{ env.config_ACR_NAME }} --image ${{ env.config_ACR_NAME }}.azurecr.io/$REPOSITORY:$GITHUBACTION_RUNNER_LATEST_TAG . --build-arg 'RUNNER_VERSION=${{ env.GITHUBACTION_RUNNER_LATEST_TAG }}' --build-arg 'REGISTRY=${{ env.config_ACR_NAME }}' --build-arg 'DOTNET_VERSION=${{ env.docker_DOTNET_VERSION }}' --build-arg 'PS_VERSION=${{ env.docker_PS_VERSION }}' --build-arg 'AZACCOUNTS_VERSION=${{ env.docker_AZACCOUNTS_VERSION }}' --build-arg 'AZKEYVAULT_VERSION=${{ env.docker_AZKEYVAULT_VERSION }}' --build-arg 'AZSTORAGE_VERSION=${{ env.docker_AZSTORAGE_VERSION }}' --build-arg 'AZAPPINSIGHT_VERSION=${{ env.docker_AZAPPINSIGHT_VERSION }}' --build-arg 'AZNETWORK_VERSION=${{ env.docker_AZNETWORK_VERSION }}' --build-arg 'AZRESOURCES_VERSION=${{ env.docker_AZRESOURCES_VERSION }}' --build-arg 'AZ_TABLE_VERSION=${{ env.docker_AZ_TABLE_VERSION }}' --build-arg 'MS_GRAPH_VERSION=${{ env.docker_MS_GRAPH_VERSION }}' --build-arg 'MS_ENTRA_VERSION=${{ env.docker_MS_ENTRA_VERSION }}' --build-arg 'TERRAFORM_VERSION=${{ env.docker_TERRAFORM_VERSION }}' --build-arg 'TERRAGRUNT_VERSION=${{ env.docker_TERRAGRUNT_VERSION }}' --build-arg 'AZURECLI_VERSION=${{ env.docker_AZURECLI_VERSION }}' --build-arg  'UBUNTU_LTS_VERSION=${{ env.docker_UBUNTU_LTS_VERSION }}' 

    - name: Get Image latest version
      uses: Azure/CLI@v2
      with:
        inlineScript: |
         # Get Latest version of the GitHub Action Runner official image in ACR registry
         echo "Latest Runner image available : $(az acr repository show-tags --name ${{ env.config_ACR_NAME }} --repository $REPOSITORY --top 1 --orderby time_desc --out tsv)"
         echo "IMAGE_LATEST_VERSION=$(az acr repository show-tags --name ${{ env.config_ACR_NAME }} --repository $REPOSITORY --top 1 --orderby time_desc --out tsv)" >> $GITHUB_ENV

    - name: 'Az CLI login OpenIDConnect (Refresh)'
      if: ${{contains(github.ref, 'main')}}
      uses: azure/login@v2
      with:
        client-id: ${{ secrets[env.SPN_CLIENT_ID_NAME] }}
        tenant-id: ${{ secrets[env.AZUREAD_TENANT_ID] }}
        subscription-id: ${{ secrets[env.HUB_SUBSCRIPTION_ID] }}
        enable-AzPSSession: true
      
    - name: Get GHRunner custom image latest version
      if: ${{ env.config_GHRUNNER_IMAGE_VERSION == 'Latest' }} 
      uses: Azure/CLI@v2
      with:
        inlineScript: |
          # Get Latest version of the GitHub Action Runner custom image in ACR registry
          echo "IMAGE_LATEST_VERSION=$(az acr repository show-tags --name ${{ env.config_ACR_NAME }} --repository $REPOSITORY --top 1 --orderby time_desc --out tsv)" >> $GITHUB_ENV

    - name : Check if Runner image version is the latest
      id: checkSemanticVersion
      uses: aleoyakas/check-semver-increased-action@v1
      with:
        current-version: ${{ env.GITHUBACTION_RUNNER_LATEST_TAG }}
        previous-version: ${{ env.IMAGE_LATEST_VERSION }}

    - name: New Runner version available
      id : NewRunnerversionavailable
      if: steps.checkSemanticVersion.outputs.is-version-increased == 'true'
      run: echo "A new version of the Github Action Runner image is available  ${{ env.GITHUBACTION_RUNNER_LATEST_TAG }}."

    - uses: Azure/CLI@v2
      with:
        inlineScript: |
          # Logoff from Azure and clean cache
          az logout
          az cache purge
          az account clear