name: 3-DeployGHRunner

on:
  workflow_dispatch:
    inputs:
      Environment:
        type: string
        description: 'Environment Name PRD/DEV'
        required: true
        default: 'DEV'

permissions:
  id-token: write
  contents: read

env:
  REPOSITORY: runner_base
  
jobs:
  DeployGHRunner:
    runs-on: ubuntu-latest  
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Check JSON environment file
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
          files: 'IaC/Environments/${{ github.event.inputs.Environment }}.JSON'
          ignore_case: true
          fail: true

    - name: Load JSON environment file into Environment variables
      if: steps.check_files.outputs.files_exists == 'true'
      uses: rgarcia-phi/json-to-variables@v1.1.0
      with:
        filename: 'IaC/Environments/${{ github.event.inputs.Environment }}.JSON' 
        prefix: config
        masked: false
    
    - name: Set environment variables required to select corresponding GitHub Action secrets
      shell: bash  
      run: |
          # Set environment variables required for authentication
          echo "SPN_CLIENT_ID_NAME=${{ github.event.inputs.Environment }}_SPN_APPLICATION_CLIENT_ID" >> $GITHUB_ENV
          echo "SPN_CLIENT_SECRET=${{ github.event.inputs.Environment }}_SPN_APPLICATION_SECRET" >> $GITHUB_ENV
          echo "AZUREAD_TENANT_ID=${{github.event.inputs.Environment }}_AZUREAD_TENANT_ID" >> $GITHUB_ENV
          echo "HUB_SUBSCRIPTION_ID=${{ github.event.inputs.Environment }}_SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "GHRUNNER_APP_ID=${{ github.event.inputs.Environment }}_GHRUNNER_APP_ID" >> $GITHUB_ENV
          echo "GHRUNNER_APP_INSTALLATION_ID=${{ github.event.inputs.Environment }}_GHRUNNER_APP_INSTALLATION_ID" >> $GITHUB_ENV
          echo "GHRUNNER_APP_PEM=${{ github.event.inputs.Environment }}_GHRUNNER_APP_PEM" >> $GITHUB_ENV

    - name: 'Az CLI login OpenIDConnect'
      if: ${{contains(github.ref, 'main')}}
      uses: azure/login@v2
      with:
        client-id: ${{ secrets[env.SPN_CLIENT_ID_NAME] }}
        tenant-id: ${{ secrets[env.AZUREAD_TENANT_ID] }}
        subscription-id: ${{ secrets[env.HUB_SUBSCRIPTION_ID] }}
        enable-AzPSSession: true

    - name: 'Azure login SPN'
      if: ${{ ! contains(github.ref, 'main')}}
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets[env.SPN_CLIENT_ID_NAME] }}","clientSecret":"${{ secrets[env.SPN_CLIENT_SECRET] }}","subscriptionId":"${{ secrets[env.HUB_SUBSCRIPTION_ID] }}","tenantId":"${{ secrets[env.AZUREAD_TENANT_ID] }}"}'
        enable-AzPSSession: true 

    - name: 'Update KeyVault Secrets for GitHub Runner App authentication'
      id: UpdateKeyVaultSecrets
      uses: Azure/CLI@v2
      with:
        inlineScript: |
          # Update Key Vault secrets for GitHub Runner App authentication
          az keyvault secret set --vault-name ${{ env.config_KEYVAULT_NAME }} --name "GitHubPEM" --value "${{ secrets[env.GHRUNNER_APP_PEM] }}"

    - name: Get GHRunner custom image latest version (Latest)
      id: GetLatestVersion
      if: ${{ env.config_GHRUNNER_IMAGE_VERSION == 'Latest' }} 
      uses: Azure/CLI@v2
      with:
        inlineScript: |
          # Get Latest version of the GitHub Action Runner custom image in ACR registry
          echo "IMAGE_LATEST_VERSION=$(az acr repository show-tags --name ${{ env.config_ACR_NAME }} --repository runner_base --top 1 --orderby time_desc --out tsv)" >> $GITHUB_ENV

    - name: Get GHRunner custom image latest version 
      id: GetFixedVersion
      if: ${{ env.config_GHRUNNER_IMAGE_VERSION != 'Latest' }} 
      uses: Azure/CLI@v2
      with:
        inlineScript: |
          # Get Latest version of the GitHub Action Runner custom image in ACR registry
          echo "IMAGE_LATEST_VERSION=${{ env.config_GHRUNNER_IMAGE_VERSION }}" >> $GITHUB_ENV

    - name : Check if Runner image version is the latest
      id: checkSemanticVersion
      uses: aleoyakas/check-semver-increased-action@v1
      with:
        current-version: ${{ env.GITHUBACTION_RUNNER_LATEST_TAG }}
        previous-version: ${{ env.IMAGE_LATEST_VERSION }}

    - name: New Runner version available
      id : NewRunnerversionavailable
      if: steps.checkSemanticVersion.outputs.is-version-increased == 'true'
      run: echo "A new version of thr Github Action Runner image is available  ${{ env.GITHUBACTION_RUNNER_LATEST_TAG }}."

    - name: Get GHRunner custom image selected version
      id: CheckSelected
      if: ${{ env.config_GHRUNNER_IMAGE_VERSION != 'Latest' }} 
      uses: Azure/CLI@v2
      with:
        inlineScript: |
          # Get version of the GitHub Action Runner as provided in the environment JSON file
          CheckVersion=$(az acr repository show-tags --name ${{ env.config_ACR_NAME }} --repository runner_base --output tsv)
          if  echo "$CheckVersion" | grep -q "${{ env.config_GHRUNNER_IMAGE_VERSION }}"; then
            echo "Image tag ${{ env.config_GHRUNNER_IMAGE_VERSION }} exists in repository runner_base of registry ${{ env.config_ACR_NAME }}."
            echo "IMAGE_LATEST_VERSION=${{ env.config_GHRUNNER_IMAGE_VERSION }}" >> $GITHUB_ENV
          else
            echo "Image tag ${{ env.config_GHRUNNER_IMAGE_VERSION }} does not exists for repository runner_base of registry ${{ env.config_ACR_NAME }}."
            exit 1
          fi
          echo "Image to be deployed : $IMAGE_LATEST_VERSION"
          echo "IMAGE_LATEST_VERSION=${{ env.config_GHRUNNER_IMAGE_VERSION }}" >> $GITHUB_ENV

    - name: 'Deploy GitHub Runner Job'
      id: DeployContainerJob
      uses: Azure/CLI@v2
      with:
        inlineScript: |
          # Perform Bicep deployment at resource group level
          cd IaC/0-CICDRunner
          az deployment group create --resource-group ${{ env.config_LOCATION }} --template-file GitHubRunner-job.bicep --parameters location=${{ env.config_LOCATION }} Environment=${{ env.config_ENVIRONMENT }} Acr_Name=${{ env.config_ACR_NAME }} KeyVault_Name=${{ env.config_KEYVAULT_NAME }} Runner_Image_Tag=${{ env.IMAGE_LATEST_VERSION }} GitHub_Repo_Owner=${{ env.config_GITHUB_REPO_OWNER }} GitHub_Repo_Name=${{ env.config_GITHUB_REPO_NAME }} GitHub_App_ID=${{ env.config_GHRUNNER_APP_ID }} GitHub_App_Installation_ID=${{ env.config_GHRUNNER_APP_INSTALLATION_ID }} Version=${{ env.config_VERSION }}

    - uses: Azure/CLI@v2
      with:
        inlineScript: |
          # Logoff from Azure and clean cache
          az logout
          az cache purge
          az account clear